use powdr_number::FieldElement;

const ROUND_CONSTANTS: [[u32; 24]; 16] = [
    [
        781065863, 1704334099, 1614250469, 858342508, 1331255579, 94027721, 1633402383, 1774536800,
        967783090, 1429869924, 37790139, 1067472776, 1703182141, 1722007170, 826573738, 1380955441,
        1173986918, 427450465, 703550610, 214947471, 810976863, 1569294983, 1294224805, 40193270,
    ],
    [
        858808123, 1982585188, 797628021, 273000383, 570536182, 1015052027, 1622799895, 1845434468,
        393329457, 870203221, 56318764, 1364908618, 929735258, 410647527, 1272874215, 1250307830,
        1985094168, 1183107810, 290944485, 1431023892, 1514015400, 150034509, 1932176786,
        113929158,
    ],
    [
        314648554, 412945090, 1799565197, 1437543685, 210037341, 267254220, 1123299502, 1012046526,
        1811748296, 1082880104, 452117508, 591556198, 26422375, 928482204, 1782339126, 471400423,
        1715755484, 1620279079, 898856400, 1060851389, 1774418870, 1523201093, 9015542, 500181102,
    ],
    [
        1011868729, 1943785875, 410764106, 1856107565, 1977593067, 1362094997, 1586847440,
        1751322463, 1820671903, 712390866, 1344285673, 1301479607, 1447437124, 1817620797,
        796225227, 1958608680, 1934746594, 688362361, 1897565392, 242159596, 1362690728,
        1540780945, 309719651, 1780905031,
    ],
    [
        1403665294, 1889289665, 1998617149, 1455767632, 497240095, 309963516, 1683981810,
        1877298991, 868046153, 890940275, 283303262, 145680600, 1105472003, 1676373559, 940577289,
        233213338, 369884595, 39502463, 1425277724, 951005540, 1216021342, 381524560, 1062589222,
        1537626390,
    ],
    [
        347091819, 781614254, 1465862749, 611525604, 1661958720, 1585470899, 726892227, 1080833156,
        1801120382, 894459206, 1625007661, 80924995, 1806184511, 1319925328, 1921831187, 167046462,
        542522046, 1727482804, 37015631, 532910846, 137187551, 324474051, 95873217, 1089984426,
    ],
    [
        1599468792, 1574163835, 384459982, 549724551, 582315897, 1358895180, 2000441089,
        1413250263, 1046049762, 1314718422, 1858824814, 1325641465, 1915668633, 730880289,
        537405228, 1062171431, 1879294470, 1321716416, 1089899507, 1229043173, 569341304,
        775041806, 618952009, 1526482468,
    ],
    [
        747187630, 1533270493, 1436636925, 1831058620, 391834452, 686629664, 1394514513,
        1145369710, 169339882, 455736318, 1351361801, 1805320344, 254925967, 663478677, 1143058407,
        201743468, 333292135, 436977712, 145171880, 1638797588, 869807707, 1479708171, 247945700,
        636657680,
    ],
    [
        1800655809, 534849574, 763774749, 1725226986, 176019677, 1310666129, 913374432, 243131964,
        812872171, 709216305, 976546120, 451648869, 1245580916, 992812111, 1359656445, 1815138554,
        802353999, 1524870119, 1378751224, 696990883, 864419883, 375427563, 614468479, 79512304,
    ],
    [
        870844598, 116915927, 1133474855, 1116066513, 1926233652, 579529444, 1766547080, 15858194,
        415206813, 677640980, 1536525063, 1784986021, 966527788, 1228848893, 389281904, 1981557026,
        1420369881, 906667212, 1116363768, 324768492, 1792012694, 1843911887, 1628334558,
        1936064854,
    ],
    [
        1647721312, 1333680848, 730089459, 1705577021, 1024884485, 1655307890, 246479249,
        1238364731, 799847037, 728207769, 872552252, 1119955619, 791943038, 367506252, 607459606,
        1942205388, 1411828801, 296376720, 514768068, 531696616, 25737860, 277396396, 1963102133,
        48397325,
    ],
    [
        460780171, 1775289355, 308042941, 1313995736, 15784852, 993571256, 1659156273, 1483917495,
        1249965883, 7408280, 572633063, 503972473, 84554475, 1353398130, 956485577, 755538766,
        978125791, 1998923402, 1375172785, 425319830, 919012147, 862263146, 530984479, 479978121,
    ],
    [
        1735007748, 1983552037, 1532863621, 94738396, 992120364, 1970564083, 1944479098, 180642514,
        981543785, 673892942, 747791441, 370435416, 472286683, 1631728050, 1200210219, 657060459,
        1329399143, 1481360832, 33311276, 1356620894, 285201111, 1896118057, 1178549185, 414442762,
    ],
    [
        336001371, 905646944, 1288306270, 385833350, 3792692, 1072385714, 1194261137, 226255882,
        368055032, 163075143, 574924181, 1162051737, 589145361, 75983087, 89570374, 1565702224,
        315099133, 1862294673, 715849472, 25972299, 1529251108, 698696249, 932100232, 445083324,
    ],
    [
        530891828, 1933977884, 1592450725, 552820301, 205373871, 1615779048, 1712966350, 229391213,
        351551872, 1331607174, 898936160, 1928892857, 569661577, 1299759989, 1201375435, 275384085,
        184666356, 117155355, 1408099503, 508336153, 312454082, 347215394, 124141245, 1249197578,
    ],
    [
        502875698, 94566700, 944962399, 1947668840, 320428096, 1723325098, 1947574712, 834474017,
        898159590, 661091227, 579623035, 327778019, 475193480, 1623272042, 784175618, 1827385979,
        488670676, 423974878, 622252982, 1852893657, 796911113, 283290113, 883353761, 968383311,
    ],
];

const MDS_MATRIX: [[u32; 16]; 16] = [
    [1, 1, 51, 1, 11, 17, 2, 1, 101, 63, 15, 2, 67, 22, 13, 3],
    [3, 1, 1, 51, 1, 11, 17, 2, 1, 101, 63, 15, 2, 67, 22, 13],
    [13, 3, 1, 1, 51, 1, 11, 17, 2, 1, 101, 63, 15, 2, 67, 22],
    [22, 13, 3, 1, 1, 51, 1, 11, 17, 2, 1, 101, 63, 15, 2, 67],
    [67, 22, 13, 3, 1, 1, 51, 1, 11, 17, 2, 1, 101, 63, 15, 2],
    [2, 67, 22, 13, 3, 1, 1, 51, 1, 11, 17, 2, 1, 101, 63, 15],
    [15, 2, 67, 22, 13, 3, 1, 1, 51, 1, 11, 17, 2, 1, 101, 63],
    [63, 15, 2, 67, 22, 13, 3, 1, 1, 51, 1, 11, 17, 2, 1, 101],
    [101, 63, 15, 2, 67, 22, 13, 3, 1, 1, 51, 1, 11, 17, 2, 1],
    [1, 101, 63, 15, 2, 67, 22, 13, 3, 1, 1, 51, 1, 11, 17, 2],
    [2, 1, 101, 63, 15, 2, 67, 22, 13, 3, 1, 1, 51, 1, 11, 17],
    [17, 2, 1, 101, 63, 15, 2, 67, 22, 13, 3, 1, 1, 51, 1, 11],
    [11, 17, 2, 1, 101, 63, 15, 2, 67, 22, 13, 3, 1, 1, 51, 1],
    [1, 11, 17, 2, 1, 101, 63, 15, 2, 67, 22, 13, 3, 1, 1, 51],
    [51, 1, 11, 17, 2, 1, 101, 63, 15, 2, 67, 22, 13, 3, 1, 1],
    [1, 51, 1, 11, 17, 2, 1, 101, 63, 15, 2, 67, 22, 13, 3, 1],
];

/// Poseidon hash for the BabyBear field.
/// Takes 16 field elememnts as input.
/// Its a direct port of the PoseidonBB machine and should behave the same.
pub fn poseidon_bb<F: FieldElement>(inputs: &[F]) -> [F; 8] {
    assert_eq!(
        F::known_field().unwrap(),
        powdr_number::KnownField::BabyBearField
    );
    assert_eq!(inputs.len(), 16);
    let mut state = [F::zero(); 16];
    state.copy_from_slice(inputs);

    // 8 full rounds and 16 partial rounds.
    let partial_rounds = 4..20;
    for round in 0..24 {
        // add round constants to state
        state.iter_mut().enumerate().for_each(|(i, s)| {
            *s += F::from(ROUND_CONSTANTS[i][round]);
        });
        // apply S-Box to first element (partial round) or all of them (full round)
        state.iter_mut().enumerate().for_each(|(i, s)| {
            if i == 0 || !partial_rounds.contains(&round) {
                *s = s.pow(7.into());
            }
        });
        // multiply with MDS
        let mds_input = state;
        state.iter_mut().enumerate().for_each(|(i, s)| {
            let mut tmp = F::zero();
            mds_input.iter().enumerate().for_each(|(j, m)| {
                tmp += *m * F::from(MDS_MATRIX[i][j]);
            });
            *s = tmp;
        });
    }

    let mut result = [F::zero(); 8];
    result.copy_from_slice(state[0..8].as_ref());
    result
}

#[cfg(test)]
mod tests {
    use itertools::Itertools;
    use powdr_number::{BabyBearField, FieldElement};

    use super::*;

    fn run_test(inputs: &[u32], expected_output: &[u32]) {
        let inputs = inputs.iter().map(|&x| BabyBearField::from(x)).collect_vec();
        let output = poseidon_bb(&inputs);
        let output: [u32; 8] = output.map(|x| x.to_arbitrary_integer().try_into().unwrap());
        assert_eq!(&output, expected_output);
    }

    #[test]
    fn poseidon_bb_function() {
        // Values taken from the PoseidonBB machine tests
        let inputs: Vec<u32> = vec![0; 16];
        let expected = vec![
            958909011, 1204189760, 1051708848, 538282630, 129608908, 219931460, 1794729453,
            1386481683,
        ];
        run_test(&inputs, &expected);

        let inputs: Vec<u32> = vec![1; 16];
        let expected = vec![
            605188316, 179227070, 987768411, 743435232, 1037675772, 926267312, 842954441,
            1311415732,
        ];
        run_test(&inputs, &expected);

        let minus_one: u32 = 0x78000000; // -1 in the BabyBear field
        let inputs: Vec<u32> = vec![minus_one; 16];
        let expected = vec![
            1100602725, 287073314, 1141334375, 212177781, 1688593373, 1515905513, 1635387847,
            693019811,
        ];
        run_test(&inputs, &expected);

        let inputs: Vec<u32> = vec![
            (14 << 16) + 6474,
            (3225 << 16) + 31229,
            (13499 << 16) + 22633,
            (1 << 16) + 47334,
            (26147 << 16) + 51257,
            (14081 << 16) + 12102,
            (25381 << 16) + 5145,
            2087,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
        ];
        let expected = vec![
            731906575, 1685915147, 1200872284, 1493840138, 404883058, 1229250173, 1012016786,
            481888550,
        ];
        run_test(&inputs, &expected);
    }
}
